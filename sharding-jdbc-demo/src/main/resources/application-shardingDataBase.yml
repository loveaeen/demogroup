#水平分库水平分表配置,两个数据库，每个数据库中两张表
spring:
  shardingsphere:
    # 数据源名称 db1 、db2
    datasource:
      names: db1,db2
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.119.51:3306/test1?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
        username: root
        password: root
      db2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.119.52:3306/test1?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
        username: root
        password: root

    # 配置数据库的分布，表的分布
    sharding:
      tables:
        user_info:
          # db1:user_info1 user_info2; db2:user_info1,user_info2;
          actual-data-nodes: db$->{1..2}.user_info$->{1..2}
          # 指定user_info表 主键id 生成策略为 SNOWFLAKE
          key-generator:
            column: id
            type: SNOWFLAKE
          # 指定数据库分片策略 约定user_info值是偶数添加到user_info1中，奇数添加到user_info2中
          database-strategy:
            inline:
              sharding-column: id
              algorithm-expression: db$->{id%2+1}
            # 指定表分片策略
          table-strategy:
            inline:
              #根据年龄插入不同的表，如果年龄大于15岁插入user_info1表，如果年龄小于或等于15插入user_info2表
              sharding-column: age
              algorithm-expression: user_info$->{age>15?1:2}
              #约定id值是偶数添加到user_info1表，如果id是奇数添加到user_info2表
#              sharding-column: id
#              algorithm-expression: user_info$->{id%2+1}
    props:
      sql:
        show: true
